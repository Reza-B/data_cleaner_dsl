# Generated from /home/h00man/University/Compiler/project/data_cleaner_dsl/grammar/DataCleaner.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,375,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,5,29,
        331,8,29,10,29,12,29,334,9,29,1,30,4,30,337,8,30,11,30,12,30,338,
        1,31,1,31,5,31,343,8,31,10,31,12,31,346,9,31,1,31,1,31,1,32,4,32,
        351,8,32,11,32,12,32,352,1,32,1,32,1,33,1,33,1,33,1,33,3,33,361,
        8,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,369,8,34,10,34,12,34,372,
        9,34,1,34,1,34,1,344,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,3,0,9,9,13,13,32,32,2,0,10,10,13,13,
        381,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        1,71,1,0,0,0,3,76,1,0,0,0,5,96,1,0,0,0,7,109,1,0,0,0,9,114,1,0,0,
        0,11,124,1,0,0,0,13,134,1,0,0,0,15,136,1,0,0,0,17,138,1,0,0,0,19,
        150,1,0,0,0,21,164,1,0,0,0,23,180,1,0,0,0,25,192,1,0,0,0,27,203,
        1,0,0,0,29,210,1,0,0,0,31,216,1,0,0,0,33,234,1,0,0,0,35,243,1,0,
        0,0,37,248,1,0,0,0,39,251,1,0,0,0,41,259,1,0,0,0,43,271,1,0,0,0,
        45,281,1,0,0,0,47,284,1,0,0,0,49,291,1,0,0,0,51,295,1,0,0,0,53,311,
        1,0,0,0,55,316,1,0,0,0,57,323,1,0,0,0,59,328,1,0,0,0,61,336,1,0,
        0,0,63,340,1,0,0,0,65,350,1,0,0,0,67,360,1,0,0,0,69,364,1,0,0,0,
        71,72,5,108,0,0,72,73,5,111,0,0,73,74,5,97,0,0,74,75,5,100,0,0,75,
        2,1,0,0,0,76,77,5,114,0,0,77,78,5,101,0,0,78,79,5,109,0,0,79,80,
        5,111,0,0,80,81,5,118,0,0,81,82,5,101,0,0,82,83,5,95,0,0,83,84,5,
        114,0,0,84,85,5,111,0,0,85,86,5,119,0,0,86,87,5,115,0,0,87,88,5,
        95,0,0,88,89,5,109,0,0,89,90,5,105,0,0,90,91,5,115,0,0,91,92,5,115,
        0,0,92,93,5,105,0,0,93,94,5,110,0,0,94,95,5,103,0,0,95,4,1,0,0,0,
        96,97,5,102,0,0,97,98,5,105,0,0,98,99,5,108,0,0,99,100,5,108,0,0,
        100,101,5,95,0,0,101,102,5,109,0,0,102,103,5,105,0,0,103,104,5,115,
        0,0,104,105,5,115,0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,108,
        5,103,0,0,108,6,1,0,0,0,109,110,5,119,0,0,110,111,5,105,0,0,111,
        112,5,116,0,0,112,113,5,104,0,0,113,8,1,0,0,0,114,115,5,110,0,0,
        115,116,5,111,0,0,116,117,5,114,0,0,117,118,5,109,0,0,118,119,5,
        97,0,0,119,120,5,108,0,0,120,121,5,105,0,0,121,122,5,122,0,0,122,
        123,5,101,0,0,123,10,1,0,0,0,124,125,5,116,0,0,125,126,5,111,0,0,
        126,127,5,95,0,0,127,128,5,114,0,0,128,129,5,97,0,0,129,130,5,110,
        0,0,130,131,5,103,0,0,131,132,5,101,0,0,132,133,5,40,0,0,133,12,
        1,0,0,0,134,135,5,44,0,0,135,14,1,0,0,0,136,137,5,41,0,0,137,16,
        1,0,0,0,138,139,5,115,0,0,139,140,5,116,0,0,140,141,5,97,0,0,141,
        142,5,110,0,0,142,143,5,100,0,0,143,144,5,97,0,0,144,145,5,114,0,
        0,145,146,5,100,0,0,146,147,5,105,0,0,147,148,5,122,0,0,148,149,
        5,101,0,0,149,18,1,0,0,0,150,151,5,108,0,0,151,152,5,111,0,0,152,
        153,5,103,0,0,153,154,5,95,0,0,154,155,5,116,0,0,155,156,5,114,0,
        0,156,157,5,97,0,0,157,158,5,110,0,0,158,159,5,115,0,0,159,160,5,
        102,0,0,160,161,5,111,0,0,161,162,5,114,0,0,162,163,5,109,0,0,163,
        20,1,0,0,0,164,165,5,97,0,0,165,166,5,117,0,0,166,167,5,116,0,0,
        167,168,5,111,0,0,168,169,5,95,0,0,169,170,5,99,0,0,170,171,5,97,
        0,0,171,172,5,116,0,0,172,173,5,101,0,0,173,174,5,103,0,0,174,175,
        5,111,0,0,175,176,5,114,0,0,176,177,5,105,0,0,177,178,5,122,0,0,
        178,179,5,101,0,0,179,22,1,0,0,0,180,181,5,110,0,0,181,182,5,95,
        0,0,182,183,5,99,0,0,183,184,5,108,0,0,184,185,5,117,0,0,185,186,
        5,115,0,0,186,187,5,116,0,0,187,188,5,101,0,0,188,189,5,114,0,0,
        189,190,5,115,0,0,190,191,5,61,0,0,191,24,1,0,0,0,192,193,5,115,
        0,0,193,194,5,112,0,0,194,195,5,108,0,0,195,196,5,105,0,0,196,197,
        5,116,0,0,197,198,5,95,0,0,198,199,5,100,0,0,199,200,5,97,0,0,200,
        201,5,116,0,0,201,202,5,97,0,0,202,26,1,0,0,0,203,204,5,116,0,0,
        204,205,5,114,0,0,205,206,5,97,0,0,206,207,5,105,0,0,207,208,5,110,
        0,0,208,209,5,61,0,0,209,28,1,0,0,0,210,211,5,116,0,0,211,212,5,
        101,0,0,212,213,5,115,0,0,213,214,5,116,0,0,214,215,5,61,0,0,215,
        30,1,0,0,0,216,217,5,114,0,0,217,218,5,101,0,0,218,219,5,109,0,0,
        219,220,5,111,0,0,220,221,5,118,0,0,221,222,5,101,0,0,222,223,5,
        95,0,0,223,224,5,100,0,0,224,225,5,117,0,0,225,226,5,112,0,0,226,
        227,5,108,0,0,227,228,5,105,0,0,228,229,5,99,0,0,229,230,5,97,0,
        0,230,231,5,116,0,0,231,232,5,101,0,0,232,233,5,115,0,0,233,32,1,
        0,0,0,234,235,5,100,0,0,235,236,5,114,0,0,236,237,5,111,0,0,237,
        238,5,112,0,0,238,239,5,95,0,0,239,240,5,114,0,0,240,241,5,111,0,
        0,241,242,5,119,0,0,242,34,1,0,0,0,243,244,5,102,0,0,244,245,5,114,
        0,0,245,246,5,111,0,0,246,247,5,109,0,0,247,36,1,0,0,0,248,249,5,
        116,0,0,249,250,5,111,0,0,250,38,1,0,0,0,251,252,5,101,0,0,252,253,
        5,120,0,0,253,254,5,99,0,0,254,255,5,108,0,0,255,256,5,117,0,0,256,
        257,5,100,0,0,257,258,5,101,0,0,258,40,1,0,0,0,259,260,5,100,0,0,
        260,261,5,114,0,0,261,262,5,111,0,0,262,263,5,112,0,0,263,264,5,
        95,0,0,264,265,5,99,0,0,265,266,5,111,0,0,266,267,5,108,0,0,267,
        268,5,117,0,0,268,269,5,109,0,0,269,270,5,110,0,0,270,42,1,0,0,0,
        271,272,5,105,0,0,272,273,5,110,0,0,273,274,5,116,0,0,274,275,5,
        101,0,0,275,276,5,103,0,0,276,277,5,114,0,0,277,278,5,97,0,0,278,
        279,5,116,0,0,279,280,5,101,0,0,280,44,1,0,0,0,281,282,5,105,0,0,
        282,283,5,110,0,0,283,46,1,0,0,0,284,285,5,101,0,0,285,286,5,110,
        0,0,286,287,5,99,0,0,287,288,5,111,0,0,288,289,5,100,0,0,289,290,
        5,101,0,0,290,48,1,0,0,0,291,292,5,97,0,0,292,293,5,108,0,0,293,
        294,5,108,0,0,294,50,1,0,0,0,295,296,5,100,0,0,296,297,5,101,0,0,
        297,298,5,108,0,0,298,299,5,101,0,0,299,300,5,116,0,0,300,301,5,
        101,0,0,301,302,5,95,0,0,302,303,5,111,0,0,303,304,5,117,0,0,304,
        305,5,116,0,0,305,306,5,108,0,0,306,307,5,105,0,0,307,308,5,101,
        0,0,308,309,5,114,0,0,309,310,5,115,0,0,310,52,1,0,0,0,311,312,5,
        109,0,0,312,313,5,101,0,0,313,314,5,97,0,0,314,315,5,110,0,0,315,
        54,1,0,0,0,316,317,5,109,0,0,317,318,5,101,0,0,318,319,5,100,0,0,
        319,320,5,105,0,0,320,321,5,97,0,0,321,322,5,110,0,0,322,56,1,0,
        0,0,323,324,5,109,0,0,324,325,5,111,0,0,325,326,5,100,0,0,326,327,
        5,101,0,0,327,58,1,0,0,0,328,332,7,0,0,0,329,331,7,1,0,0,330,329,
        1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,60,1,
        0,0,0,334,332,1,0,0,0,335,337,7,2,0,0,336,335,1,0,0,0,337,338,1,
        0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,62,1,0,0,0,340,344,5,34,
        0,0,341,343,9,0,0,0,342,341,1,0,0,0,343,346,1,0,0,0,344,345,1,0,
        0,0,344,342,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,348,5,34,
        0,0,348,64,1,0,0,0,349,351,7,3,0,0,350,349,1,0,0,0,351,352,1,0,0,
        0,352,350,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,355,6,32,0,
        0,355,66,1,0,0,0,356,361,5,10,0,0,357,358,5,13,0,0,358,361,5,10,
        0,0,359,361,5,13,0,0,360,356,1,0,0,0,360,357,1,0,0,0,360,359,1,0,
        0,0,361,362,1,0,0,0,362,363,6,33,0,0,363,68,1,0,0,0,364,365,5,47,
        0,0,365,366,5,47,0,0,366,370,1,0,0,0,367,369,8,4,0,0,368,367,1,0,
        0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,
        0,0,372,370,1,0,0,0,373,374,6,34,0,0,374,70,1,0,0,0,7,0,332,338,
        344,352,360,370,1,6,0,0
    ]

class DataCleanerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    ID = 30
    NUMBER = 31
    STRING = 32
    WS = 33
    NEWLINE = 34
    COMMENT = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'load'", "'remove_rows_missing'", "'fill_missing'", "'with'", 
            "'normalize'", "'to_range('", "','", "')'", "'standardize'", 
            "'log_transform'", "'auto_categorize'", "'n_clusters='", "'split_data'", 
            "'train='", "'test='", "'remove_duplicates'", "'drop_row'", 
            "'from'", "'to'", "'exclude'", "'drop_column'", "'integrate'", 
            "'in'", "'encode'", "'all'", "'delete_outliers'", "'mean'", 
            "'median'", "'mode'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "STRING", "WS", "NEWLINE", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "ID", "NUMBER", "STRING", "WS", 
                  "NEWLINE", "COMMENT" ]

    grammarFileName = "DataCleaner.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


