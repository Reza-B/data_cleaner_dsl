# Generated from C:/Users/KUIX/Documents/GitHub/data_cleaner_dsl/grammar/DataCleaner.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,395,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,5,30,343,
        8,30,10,30,12,30,346,9,30,1,31,4,31,349,8,31,11,31,12,31,350,1,31,
        1,31,4,31,355,8,31,11,31,12,31,356,3,31,359,8,31,1,32,1,32,5,32,
        363,8,32,10,32,12,32,366,9,32,1,32,1,32,1,33,4,33,371,8,33,11,33,
        12,33,372,1,33,1,33,1,34,1,34,1,34,1,34,3,34,381,8,34,1,34,1,34,
        1,35,1,35,1,35,1,35,5,35,389,8,35,10,35,12,35,392,9,35,1,35,1,35,
        1,364,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,48,57,3,0,9,9,13,13,32,32,2,0,10,10,13,13,403,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        1,73,1,0,0,0,3,78,1,0,0,0,5,98,1,0,0,0,7,111,1,0,0,0,9,116,1,0,0,
        0,11,126,1,0,0,0,13,136,1,0,0,0,15,138,1,0,0,0,17,140,1,0,0,0,19,
        152,1,0,0,0,21,166,1,0,0,0,23,182,1,0,0,0,25,194,1,0,0,0,27,205,
        1,0,0,0,29,212,1,0,0,0,31,222,1,0,0,0,33,228,1,0,0,0,35,246,1,0,
        0,0,37,255,1,0,0,0,39,260,1,0,0,0,41,263,1,0,0,0,43,271,1,0,0,0,
        45,283,1,0,0,0,47,293,1,0,0,0,49,296,1,0,0,0,51,303,1,0,0,0,53,307,
        1,0,0,0,55,323,1,0,0,0,57,328,1,0,0,0,59,335,1,0,0,0,61,340,1,0,
        0,0,63,348,1,0,0,0,65,360,1,0,0,0,67,370,1,0,0,0,69,380,1,0,0,0,
        71,384,1,0,0,0,73,74,5,108,0,0,74,75,5,111,0,0,75,76,5,97,0,0,76,
        77,5,100,0,0,77,2,1,0,0,0,78,79,5,114,0,0,79,80,5,101,0,0,80,81,
        5,109,0,0,81,82,5,111,0,0,82,83,5,118,0,0,83,84,5,101,0,0,84,85,
        5,95,0,0,85,86,5,114,0,0,86,87,5,111,0,0,87,88,5,119,0,0,88,89,5,
        115,0,0,89,90,5,95,0,0,90,91,5,109,0,0,91,92,5,105,0,0,92,93,5,115,
        0,0,93,94,5,115,0,0,94,95,5,105,0,0,95,96,5,110,0,0,96,97,5,103,
        0,0,97,4,1,0,0,0,98,99,5,102,0,0,99,100,5,105,0,0,100,101,5,108,
        0,0,101,102,5,108,0,0,102,103,5,95,0,0,103,104,5,109,0,0,104,105,
        5,105,0,0,105,106,5,115,0,0,106,107,5,115,0,0,107,108,5,105,0,0,
        108,109,5,110,0,0,109,110,5,103,0,0,110,6,1,0,0,0,111,112,5,119,
        0,0,112,113,5,105,0,0,113,114,5,116,0,0,114,115,5,104,0,0,115,8,
        1,0,0,0,116,117,5,110,0,0,117,118,5,111,0,0,118,119,5,114,0,0,119,
        120,5,109,0,0,120,121,5,97,0,0,121,122,5,108,0,0,122,123,5,105,0,
        0,123,124,5,122,0,0,124,125,5,101,0,0,125,10,1,0,0,0,126,127,5,116,
        0,0,127,128,5,111,0,0,128,129,5,95,0,0,129,130,5,114,0,0,130,131,
        5,97,0,0,131,132,5,110,0,0,132,133,5,103,0,0,133,134,5,101,0,0,134,
        135,5,40,0,0,135,12,1,0,0,0,136,137,5,44,0,0,137,14,1,0,0,0,138,
        139,5,41,0,0,139,16,1,0,0,0,140,141,5,115,0,0,141,142,5,116,0,0,
        142,143,5,97,0,0,143,144,5,110,0,0,144,145,5,100,0,0,145,146,5,97,
        0,0,146,147,5,114,0,0,147,148,5,100,0,0,148,149,5,105,0,0,149,150,
        5,122,0,0,150,151,5,101,0,0,151,18,1,0,0,0,152,153,5,108,0,0,153,
        154,5,111,0,0,154,155,5,103,0,0,155,156,5,95,0,0,156,157,5,116,0,
        0,157,158,5,114,0,0,158,159,5,97,0,0,159,160,5,110,0,0,160,161,5,
        115,0,0,161,162,5,102,0,0,162,163,5,111,0,0,163,164,5,114,0,0,164,
        165,5,109,0,0,165,20,1,0,0,0,166,167,5,97,0,0,167,168,5,117,0,0,
        168,169,5,116,0,0,169,170,5,111,0,0,170,171,5,95,0,0,171,172,5,99,
        0,0,172,173,5,97,0,0,173,174,5,116,0,0,174,175,5,101,0,0,175,176,
        5,103,0,0,176,177,5,111,0,0,177,178,5,114,0,0,178,179,5,105,0,0,
        179,180,5,122,0,0,180,181,5,101,0,0,181,22,1,0,0,0,182,183,5,110,
        0,0,183,184,5,95,0,0,184,185,5,99,0,0,185,186,5,108,0,0,186,187,
        5,117,0,0,187,188,5,115,0,0,188,189,5,116,0,0,189,190,5,101,0,0,
        190,191,5,114,0,0,191,192,5,115,0,0,192,193,5,61,0,0,193,24,1,0,
        0,0,194,195,5,115,0,0,195,196,5,112,0,0,196,197,5,108,0,0,197,198,
        5,105,0,0,198,199,5,116,0,0,199,200,5,95,0,0,200,201,5,100,0,0,201,
        202,5,97,0,0,202,203,5,116,0,0,203,204,5,97,0,0,204,26,1,0,0,0,205,
        206,5,116,0,0,206,207,5,114,0,0,207,208,5,97,0,0,208,209,5,105,0,
        0,209,210,5,110,0,0,210,211,5,61,0,0,211,28,1,0,0,0,212,213,5,118,
        0,0,213,214,5,97,0,0,214,215,5,108,0,0,215,216,5,105,0,0,216,217,
        5,100,0,0,217,218,5,97,0,0,218,219,5,116,0,0,219,220,5,101,0,0,220,
        221,5,61,0,0,221,30,1,0,0,0,222,223,5,116,0,0,223,224,5,101,0,0,
        224,225,5,115,0,0,225,226,5,116,0,0,226,227,5,61,0,0,227,32,1,0,
        0,0,228,229,5,114,0,0,229,230,5,101,0,0,230,231,5,109,0,0,231,232,
        5,111,0,0,232,233,5,118,0,0,233,234,5,101,0,0,234,235,5,95,0,0,235,
        236,5,100,0,0,236,237,5,117,0,0,237,238,5,112,0,0,238,239,5,108,
        0,0,239,240,5,105,0,0,240,241,5,99,0,0,241,242,5,97,0,0,242,243,
        5,116,0,0,243,244,5,101,0,0,244,245,5,115,0,0,245,34,1,0,0,0,246,
        247,5,100,0,0,247,248,5,114,0,0,248,249,5,111,0,0,249,250,5,112,
        0,0,250,251,5,95,0,0,251,252,5,114,0,0,252,253,5,111,0,0,253,254,
        5,119,0,0,254,36,1,0,0,0,255,256,5,102,0,0,256,257,5,114,0,0,257,
        258,5,111,0,0,258,259,5,109,0,0,259,38,1,0,0,0,260,261,5,116,0,0,
        261,262,5,111,0,0,262,40,1,0,0,0,263,264,5,101,0,0,264,265,5,120,
        0,0,265,266,5,99,0,0,266,267,5,108,0,0,267,268,5,117,0,0,268,269,
        5,100,0,0,269,270,5,101,0,0,270,42,1,0,0,0,271,272,5,100,0,0,272,
        273,5,114,0,0,273,274,5,111,0,0,274,275,5,112,0,0,275,276,5,95,0,
        0,276,277,5,99,0,0,277,278,5,111,0,0,278,279,5,108,0,0,279,280,5,
        117,0,0,280,281,5,109,0,0,281,282,5,110,0,0,282,44,1,0,0,0,283,284,
        5,105,0,0,284,285,5,110,0,0,285,286,5,116,0,0,286,287,5,101,0,0,
        287,288,5,103,0,0,288,289,5,114,0,0,289,290,5,97,0,0,290,291,5,116,
        0,0,291,292,5,101,0,0,292,46,1,0,0,0,293,294,5,105,0,0,294,295,5,
        110,0,0,295,48,1,0,0,0,296,297,5,101,0,0,297,298,5,110,0,0,298,299,
        5,99,0,0,299,300,5,111,0,0,300,301,5,100,0,0,301,302,5,101,0,0,302,
        50,1,0,0,0,303,304,5,97,0,0,304,305,5,108,0,0,305,306,5,108,0,0,
        306,52,1,0,0,0,307,308,5,100,0,0,308,309,5,101,0,0,309,310,5,108,
        0,0,310,311,5,101,0,0,311,312,5,116,0,0,312,313,5,101,0,0,313,314,
        5,95,0,0,314,315,5,111,0,0,315,316,5,117,0,0,316,317,5,116,0,0,317,
        318,5,108,0,0,318,319,5,105,0,0,319,320,5,101,0,0,320,321,5,114,
        0,0,321,322,5,115,0,0,322,54,1,0,0,0,323,324,5,109,0,0,324,325,5,
        101,0,0,325,326,5,97,0,0,326,327,5,110,0,0,327,56,1,0,0,0,328,329,
        5,109,0,0,329,330,5,101,0,0,330,331,5,100,0,0,331,332,5,105,0,0,
        332,333,5,97,0,0,333,334,5,110,0,0,334,58,1,0,0,0,335,336,5,109,
        0,0,336,337,5,111,0,0,337,338,5,100,0,0,338,339,5,101,0,0,339,60,
        1,0,0,0,340,344,7,0,0,0,341,343,7,1,0,0,342,341,1,0,0,0,343,346,
        1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,62,1,0,0,0,346,344,1,
        0,0,0,347,349,7,2,0,0,348,347,1,0,0,0,349,350,1,0,0,0,350,348,1,
        0,0,0,350,351,1,0,0,0,351,358,1,0,0,0,352,354,5,46,0,0,353,355,7,
        2,0,0,354,353,1,0,0,0,355,356,1,0,0,0,356,354,1,0,0,0,356,357,1,
        0,0,0,357,359,1,0,0,0,358,352,1,0,0,0,358,359,1,0,0,0,359,64,1,0,
        0,0,360,364,5,34,0,0,361,363,9,0,0,0,362,361,1,0,0,0,363,366,1,0,
        0,0,364,365,1,0,0,0,364,362,1,0,0,0,365,367,1,0,0,0,366,364,1,0,
        0,0,367,368,5,34,0,0,368,66,1,0,0,0,369,371,7,3,0,0,370,369,1,0,
        0,0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,374,1,0,
        0,0,374,375,6,33,0,0,375,68,1,0,0,0,376,381,5,10,0,0,377,378,5,13,
        0,0,378,381,5,10,0,0,379,381,5,13,0,0,380,376,1,0,0,0,380,377,1,
        0,0,0,380,379,1,0,0,0,381,382,1,0,0,0,382,383,6,34,0,0,383,70,1,
        0,0,0,384,385,5,47,0,0,385,386,5,47,0,0,386,390,1,0,0,0,387,389,
        8,4,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,
        1,0,0,0,391,393,1,0,0,0,392,390,1,0,0,0,393,394,6,35,0,0,394,72,
        1,0,0,0,9,0,344,350,356,358,364,372,380,390,1,6,0,0
    ]

class DataCleanerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    ID = 31
    NUMBER = 32
    STRING = 33
    WS = 34
    NEWLINE = 35
    COMMENT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'load'", "'remove_rows_missing'", "'fill_missing'", "'with'", 
            "'normalize'", "'to_range('", "','", "')'", "'standardize'", 
            "'log_transform'", "'auto_categorize'", "'n_clusters='", "'split_data'", 
            "'train='", "'validate='", "'test='", "'remove_duplicates'", 
            "'drop_row'", "'from'", "'to'", "'exclude'", "'drop_column'", 
            "'integrate'", "'in'", "'encode'", "'all'", "'delete_outliers'", 
            "'mean'", "'median'", "'mode'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "STRING", "WS", "NEWLINE", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "ID", "NUMBER", "STRING", 
                  "WS", "NEWLINE", "COMMENT" ]

    grammarFileName = "DataCleaner.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


