# Generated from E:/university/Compiler/DataCleaner/grammar/DataCleaner.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,278,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,5,19,226,
        8,19,10,19,12,19,229,9,19,1,20,4,20,232,8,20,11,20,12,20,233,1,20,
        1,20,4,20,238,8,20,11,20,12,20,239,3,20,242,8,20,1,21,1,21,5,21,
        246,8,21,10,21,12,21,249,9,21,1,21,1,21,1,22,4,22,254,8,22,11,22,
        12,22,255,1,22,1,22,1,23,1,23,1,23,1,23,3,23,264,8,23,1,23,1,23,
        1,24,1,24,1,24,1,24,5,24,272,8,24,10,24,12,24,275,9,24,1,24,1,24,
        1,247,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,48,57,3,0,9,9,13,13,32,32,2,0,10,10,13,13,286,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,
        3,56,1,0,0,0,5,76,1,0,0,0,7,89,1,0,0,0,9,94,1,0,0,0,11,104,1,0,0,
        0,13,114,1,0,0,0,15,116,1,0,0,0,17,118,1,0,0,0,19,130,1,0,0,0,21,
        144,1,0,0,0,23,160,1,0,0,0,25,172,1,0,0,0,27,183,1,0,0,0,29,190,
        1,0,0,0,31,200,1,0,0,0,33,206,1,0,0,0,35,211,1,0,0,0,37,218,1,0,
        0,0,39,223,1,0,0,0,41,231,1,0,0,0,43,243,1,0,0,0,45,253,1,0,0,0,
        47,263,1,0,0,0,49,267,1,0,0,0,51,52,5,108,0,0,52,53,5,111,0,0,53,
        54,5,97,0,0,54,55,5,100,0,0,55,2,1,0,0,0,56,57,5,114,0,0,57,58,5,
        101,0,0,58,59,5,109,0,0,59,60,5,111,0,0,60,61,5,118,0,0,61,62,5,
        101,0,0,62,63,5,95,0,0,63,64,5,114,0,0,64,65,5,111,0,0,65,66,5,119,
        0,0,66,67,5,115,0,0,67,68,5,95,0,0,68,69,5,109,0,0,69,70,5,105,0,
        0,70,71,5,115,0,0,71,72,5,115,0,0,72,73,5,105,0,0,73,74,5,110,0,
        0,74,75,5,103,0,0,75,4,1,0,0,0,76,77,5,102,0,0,77,78,5,105,0,0,78,
        79,5,108,0,0,79,80,5,108,0,0,80,81,5,95,0,0,81,82,5,109,0,0,82,83,
        5,105,0,0,83,84,5,115,0,0,84,85,5,115,0,0,85,86,5,105,0,0,86,87,
        5,110,0,0,87,88,5,103,0,0,88,6,1,0,0,0,89,90,5,119,0,0,90,91,5,105,
        0,0,91,92,5,116,0,0,92,93,5,104,0,0,93,8,1,0,0,0,94,95,5,110,0,0,
        95,96,5,111,0,0,96,97,5,114,0,0,97,98,5,109,0,0,98,99,5,97,0,0,99,
        100,5,108,0,0,100,101,5,105,0,0,101,102,5,122,0,0,102,103,5,101,
        0,0,103,10,1,0,0,0,104,105,5,116,0,0,105,106,5,111,0,0,106,107,5,
        95,0,0,107,108,5,114,0,0,108,109,5,97,0,0,109,110,5,110,0,0,110,
        111,5,103,0,0,111,112,5,101,0,0,112,113,5,40,0,0,113,12,1,0,0,0,
        114,115,5,44,0,0,115,14,1,0,0,0,116,117,5,41,0,0,117,16,1,0,0,0,
        118,119,5,115,0,0,119,120,5,116,0,0,120,121,5,97,0,0,121,122,5,110,
        0,0,122,123,5,100,0,0,123,124,5,97,0,0,124,125,5,114,0,0,125,126,
        5,100,0,0,126,127,5,105,0,0,127,128,5,122,0,0,128,129,5,101,0,0,
        129,18,1,0,0,0,130,131,5,108,0,0,131,132,5,111,0,0,132,133,5,103,
        0,0,133,134,5,95,0,0,134,135,5,116,0,0,135,136,5,114,0,0,136,137,
        5,97,0,0,137,138,5,110,0,0,138,139,5,115,0,0,139,140,5,102,0,0,140,
        141,5,111,0,0,141,142,5,114,0,0,142,143,5,109,0,0,143,20,1,0,0,0,
        144,145,5,97,0,0,145,146,5,117,0,0,146,147,5,116,0,0,147,148,5,111,
        0,0,148,149,5,95,0,0,149,150,5,99,0,0,150,151,5,97,0,0,151,152,5,
        116,0,0,152,153,5,101,0,0,153,154,5,103,0,0,154,155,5,111,0,0,155,
        156,5,114,0,0,156,157,5,105,0,0,157,158,5,122,0,0,158,159,5,101,
        0,0,159,22,1,0,0,0,160,161,5,110,0,0,161,162,5,95,0,0,162,163,5,
        99,0,0,163,164,5,108,0,0,164,165,5,117,0,0,165,166,5,115,0,0,166,
        167,5,116,0,0,167,168,5,101,0,0,168,169,5,114,0,0,169,170,5,115,
        0,0,170,171,5,61,0,0,171,24,1,0,0,0,172,173,5,115,0,0,173,174,5,
        112,0,0,174,175,5,108,0,0,175,176,5,105,0,0,176,177,5,116,0,0,177,
        178,5,95,0,0,178,179,5,100,0,0,179,180,5,97,0,0,180,181,5,116,0,
        0,181,182,5,97,0,0,182,26,1,0,0,0,183,184,5,116,0,0,184,185,5,114,
        0,0,185,186,5,97,0,0,186,187,5,105,0,0,187,188,5,110,0,0,188,189,
        5,61,0,0,189,28,1,0,0,0,190,191,5,118,0,0,191,192,5,97,0,0,192,193,
        5,108,0,0,193,194,5,105,0,0,194,195,5,100,0,0,195,196,5,97,0,0,196,
        197,5,116,0,0,197,198,5,101,0,0,198,199,5,61,0,0,199,30,1,0,0,0,
        200,201,5,116,0,0,201,202,5,101,0,0,202,203,5,115,0,0,203,204,5,
        116,0,0,204,205,5,61,0,0,205,32,1,0,0,0,206,207,5,109,0,0,207,208,
        5,101,0,0,208,209,5,97,0,0,209,210,5,110,0,0,210,34,1,0,0,0,211,
        212,5,109,0,0,212,213,5,101,0,0,213,214,5,100,0,0,214,215,5,105,
        0,0,215,216,5,97,0,0,216,217,5,110,0,0,217,36,1,0,0,0,218,219,5,
        109,0,0,219,220,5,111,0,0,220,221,5,100,0,0,221,222,5,101,0,0,222,
        38,1,0,0,0,223,227,7,0,0,0,224,226,7,1,0,0,225,224,1,0,0,0,226,229,
        1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,40,1,0,0,0,229,227,1,
        0,0,0,230,232,7,2,0,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,
        0,0,0,233,234,1,0,0,0,234,241,1,0,0,0,235,237,5,46,0,0,236,238,7,
        2,0,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,
        0,0,0,240,242,1,0,0,0,241,235,1,0,0,0,241,242,1,0,0,0,242,42,1,0,
        0,0,243,247,5,34,0,0,244,246,9,0,0,0,245,244,1,0,0,0,246,249,1,0,
        0,0,247,248,1,0,0,0,247,245,1,0,0,0,248,250,1,0,0,0,249,247,1,0,
        0,0,250,251,5,34,0,0,251,44,1,0,0,0,252,254,7,3,0,0,253,252,1,0,
        0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,257,1,0,
        0,0,257,258,6,22,0,0,258,46,1,0,0,0,259,264,5,10,0,0,260,261,5,13,
        0,0,261,264,5,10,0,0,262,264,5,13,0,0,263,259,1,0,0,0,263,260,1,
        0,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,266,6,23,0,0,266,48,1,
        0,0,0,267,268,5,47,0,0,268,269,5,47,0,0,269,273,1,0,0,0,270,272,
        8,4,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,
        1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,6,24,0,0,277,50,
        1,0,0,0,9,0,227,233,239,241,247,255,263,273,1,6,0,0
    ]

class DataCleanerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    ID = 20
    NUMBER = 21
    STRING = 22
    WS = 23
    NEWLINE = 24
    COMMENT = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'load'", "'remove_rows_missing'", "'fill_missing'", "'with'", 
            "'normalize'", "'to_range('", "','", "')'", "'standardize'", 
            "'log_transform'", "'auto_categorize'", "'n_clusters='", "'split_data'", 
            "'train='", "'validate='", "'test='", "'mean'", "'median'", 
            "'mode'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "STRING", "WS", "NEWLINE", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "ID", "NUMBER", 
                  "STRING", "WS", "NEWLINE", "COMMENT" ]

    grammarFileName = "DataCleaner.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


